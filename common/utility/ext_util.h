#ifndef __EXT_UTIL_H__
#define __EXT_UTIL_H__

//////////////////////////////////////////////////////////////////////////
// Ext : Inside new namespace, do not crowd global namespace
//////////////////////////////////////////////////////////////////////////

namespace ext {

//////////////////////////////////////////////////////////////////////////
// is_between() : Checks for a point inside a square
//////////////////////////////////////////////////////////////////////////

inline bool is_between(int px, int py,
					   int boundx1, int boundy1,
					   int boundx2, int boundy2)
{
	if(px < boundx2 && px > boundx1 &&
	   py < boundy2 && py > boundy1)
	{
		return true;
	}
	else
	{
		return false;
	}
}

//////////////////////////////////////////////////////////////////////////
// get_option_string() : Queries a string from the option database
//////////////////////////////////////////////////////////////////////////

inline std::string get_option_string(const std::string & name)
{
	// get option
	COption *opt = g_Options->Find(name);

	// if we found the option
	if(opt)
	{
		return opt->GetString();
	}
	else
	{
		// return a NULL string
		return std::string("");
	}
}

//////////////////////////////////////////////////////////////////////////
// get_option_int() : Queries an int from the option database
//////////////////////////////////////////////////////////////////////////

inline int get_option_int(const std::string & name)
{
	// get option
	COption *opt = g_Options->Find(name);

	// if we found the option
	if(opt)
	{
		return opt->GetInt();
	}
	else
	{
		// return 0, not found
		return 0;
	}
}

//////////////////////////////////////////////////////////////////////////
// get_option_float() : Queries a float from the option database
//////////////////////////////////////////////////////////////////////////

inline float get_option_float(const std::string & name)
{
	// get option
	COption *opt = g_Options->Find(name);

	// if we found the option
	if(opt)
	{
		return opt->GetFloat();
	}
	else
	{
		// return 0.0f, not found
		return 0.0f;
	}
}

//////////////////////////////////////////////////////////////////////////
// Ext : Extended Template Library namespace end
//////////////////////////////////////////////////////////////////////////

}

//////////////////////////////////////////////////////////////////////////
// End
//////////////////////////////////////////////////////////////////////////

#endif
