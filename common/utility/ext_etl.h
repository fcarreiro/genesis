#ifndef __EXT_ETL_H__
#define __EXT_ETL_H__

//////////////////////////////////////////////////////////////////////////
// Ext : Inside new namespace, do not crowd global namespace
//////////////////////////////////////////////////////////////////////////

namespace ext {

//////////////////////////////////////////////////////////////////////////
// remove() : Removes an item from a vector
//////////////////////////////////////////////////////////////////////////

template <typename T>
inline void remove(std::vector<T> & vector, const T & object)
{
	std::vector<T>::iterator it;

	// seek and destroy
	it = std::find(vector.begin(), vector.end(), object);
	if (it != vector.end()) vector.erase(it);
}

//////////////////////////////////////////////////////////////////////////
// find_value() : Returns an iterator by looking for an item by the value
//////////////////////////////////////////////////////////////////////////

template <typename A, typename B>
inline std::map<A, B>::iterator find_value(std::map<A, B> & map, const B & value)
{
	std::map<A, B>::iterator it;

	// check for item
	for(it = map.begin(); it != map.end(); ++it)
	{
		if(it->second == value) break;
	}

	// return item
	return it;
}

//////////////////////////////////////////////////////////////////////////
// Ext : Extended Template Library namespace end
//////////////////////////////////////////////////////////////////////////

}

//////////////////////////////////////////////////////////////////////////
// End
//////////////////////////////////////////////////////////////////////////

#endif
