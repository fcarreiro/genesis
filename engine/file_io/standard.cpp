#include "../precompiled/stdafx.h"
#include "../engine/base.h"

//////////////////////////////////////////////////////////////////////////
// Constructor & Destructor
//////////////////////////////////////////////////////////////////////////

CFileStd::CFileStd() : m_Handle(NULL)
{
	// set variables to zero
}

CFileStd::~CFileStd()
{
	// close
	Close();
}

//////////////////////////////////////////////////////////////////////////
// Open() : Opens the file
//////////////////////////////////////////////////////////////////////////

bool CFileStd::Open(const std::string & strFilename, file_mode_t mode)
{
	// close any open file
	Close();

	// try to open file
	m_Handle = fopen(strFilename.c_str(), mode == FILE_BINARY ? "rb" : "r");
	
	// return state
	return (m_Handle != NULL);
}

//////////////////////////////////////////////////////////////////////////
// Close() : Closes the package
//////////////////////////////////////////////////////////////////////////

void CFileStd::Close()
{
	// close the file if needed
	if(m_Handle)
	{
		// close file
		fclose(m_Handle);

		// reset
		m_Handle = NULL;
	}
}

//////////////////////////////////////////////////////////////////////////
// Eof() : Returns true if we have reached the end of the file
//////////////////////////////////////////////////////////////////////////

bool CFileStd::IsEof() const
{
	// if we have a package
	if(m_Handle)
	{
		return (feof(m_Handle) ? true : false);
	}
	else
	{
		return true;
	}
}

//////////////////////////////////////////////////////////////////////////
// Size() : Returns the size of the file
//////////////////////////////////////////////////////////////////////////

unsigned long CFileStd::Size()
{
	// if we have a package
	if(m_Handle)
	{
		long int end;
		long int pos;

		// get actual pos
		pos = ftell(m_Handle);

		// seek to the end
		fseek(m_Handle, 0, SEEK_END);

		// get filesize
		end = ftell(m_Handle);

		// set to the last position
		fseek(m_Handle, pos, SEEK_SET);

		// return filesize
		return end;
	}
	else
	{
		return 0;
	}
}

//////////////////////////////////////////////////////////////////////////
// Read() : Reads from file
//////////////////////////////////////////////////////////////////////////

unsigned long CFileStd::Read(void *pBuffer, unsigned long dwLength)
{
	// do some checking
	if(!pBuffer || !m_Handle) return 0;

	// read the file and return the number of bytes read
	return fread(pBuffer, dwLength, 1, m_Handle);
}

//////////////////////////////////////////////////////////////////////////
// Tell() : Returns the actual offset in the file
//////////////////////////////////////////////////////////////////////////

unsigned long CFileStd::Tell()
{
	// check
	if(!m_Handle) return 0;

	// return offset
	return ftell(m_Handle);
}

//////////////////////////////////////////////////////////////////////////
// Seek() : Seeks to requested position
//////////////////////////////////////////////////////////////////////////

void CFileStd::Seek(long dwOffset, unsigned int uiFrom)
{
	// check
	if(!m_Handle) return;

	// seek
	fseek(m_Handle, dwOffset, uiFrom);
}

//////////////////////////////////////////////////////////////////////////
// End
//////////////////////////////////////////////////////////////////////////
